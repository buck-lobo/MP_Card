#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import os
import logging
import time
from decimal import Decimal, InvalidOperation
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, ForceReply
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN, ADMIN_ID, DATA_FILE

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SaldoBotGrupos:
    def __init__(self):
        self.data_file = DATA_FILE
        self.dados = self.carregar_dados()
        self.transacoes_pendentes = {}  # Para confirma√ß√µes de transa√ß√µes
    
    def carregar_dados(self):
        """Carrega os dados do arquivo JSON"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Converter strings de volta para Decimal nos saldos
                    for chat_id in data.get('saldos', {}):
                        for user_id in data['saldos'][chat_id]:
                            data['saldos'][chat_id][user_id] = Decimal(data['saldos'][chat_id][user_id])
                    return data
            except (json.JSONDecodeError, FileNotFoundError):
                logger.warning("Erro ao carregar dados. Iniciando com dados zerados.")
                return {"saldos": {}, "usuarios": {}}
        return {"saldos": {}, "usuarios": {}}
    
    def salvar_dados(self):
        """Salva os dados no arquivo JSON"""
        try:
            # Converter Decimal para string para serializa√ß√£o JSON
            data_to_save = {"saldos": {}, "usuarios": self.dados.get("usuarios", {})}
            for chat_id in self.dados.get('saldos', {}):
                data_to_save['saldos'][chat_id] = {}
                for user_id in self.dados['saldos'][chat_id]:
                    data_to_save['saldos'][chat_id][user_id] = str(self.dados['saldos'][chat_id][user_id])
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Erro ao salvar dados: {e}")
    
    def registrar_usuario(self, user_id, user_name, username=None):
        """Registra informa√ß√µes do usu√°rio"""
        if "usuarios" not in self.dados:
            self.dados["usuarios"] = {}
        
        self.dados["usuarios"][str(user_id)] = {
            "name": user_name,
            "username": username,
            "last_seen": int(time.time())
        }
        self.salvar_dados()
    
    def obter_saldo(self, chat_id, user_id):
        """Obt√©m o saldo de um usu√°rio em um chat espec√≠fico"""
        chat_id_str = str(chat_id)
        user_id_str = str(user_id)
        
        if "saldos" not in self.dados:
            self.dados["saldos"] = {}
        
        if chat_id_str not in self.dados["saldos"]:
            self.dados["saldos"][chat_id_str] = {}
        
        return self.dados["saldos"][chat_id_str].get(user_id_str, Decimal('0'))
    
    def adicionar_valor(self, chat_id, user_id, valor):
        """Adiciona um valor ao saldo do usu√°rio em um chat espec√≠fico"""
        chat_id_str = str(chat_id)
        user_id_str = str(user_id)
        
        if "saldos" not in self.dados:
            self.dados["saldos"] = {}
        
        if chat_id_str not in self.dados["saldos"]:
            self.dados["saldos"][chat_id_str] = {}
        
        if user_id_str not in self.dados["saldos"][chat_id_str]:
            self.dados["saldos"][chat_id_str][user_id_str] = Decimal('0')
        
        self.dados["saldos"][chat_id_str][user_id_str] += valor
        self.salvar_dados()
    
    def zerar_saldo(self, chat_id, user_id):
        """Zera o saldo de um usu√°rio em um chat espec√≠fico"""
        chat_id_str = str(chat_id)
        user_id_str = str(user_id)
        
        if "saldos" not in self.dados:
            self.dados["saldos"] = {}
        
        if chat_id_str not in self.dados["saldos"]:
            self.dados["saldos"][chat_id_str] = {}
        
        self.dados["saldos"][chat_id_str][user_id_str] = Decimal('0')
        self.salvar_dados()
    
    def zerar_todos_saldos(self, chat_id):
        """Zera todos os saldos de um chat espec√≠fico"""
        chat_id_str = str(chat_id)
        
        if "saldos" not in self.dados:
            self.dados["saldos"] = {}
        
        self.dados["saldos"][chat_id_str] = {}
        self.salvar_dados()
    
    def obter_info_usuario(self, user_id):
        """Obt√©m informa√ß√µes de um usu√°rio"""
        return self.dados.get("usuarios", {}).get(str(user_id), None)
    
    def listar_usuarios_chat(self, chat_id):
        """Lista usu√°rios que j√° interagiram no chat"""
        chat_id_str = str(chat_id)
        usuarios_chat = []
        
        if "saldos" in self.dados and chat_id_str in self.dados["saldos"]:
            for user_id in self.dados["saldos"][chat_id_str]:
                info_usuario = self.obter_info_usuario(user_id)
                if info_usuario:
                    usuarios_chat.append({
                        "id": user_id,
                        "name": info_usuario["name"],
                        "username": info_usuario.get("username"),
                        "saldo": self.dados["saldos"][chat_id_str][user_id]
                    })
        
        return usuarios_chat

# Inst√¢ncia global do bot
saldo_bot = SaldoBotGrupos()

def criar_menu_principal(user_id, chat_type):
    """Cria o teclado do menu principal"""
    keyboard = [
        [
            InlineKeyboardButton("üí∞ Adicionar Valor", callback_data="menu_adicionar"),
            InlineKeyboardButton("üìä Ver Saldo", callback_data="menu_saldo")
        ]
    ]
    
    # Adicionar op√ß√µes espec√≠ficas para grupos
    if chat_type in ['group', 'supergroup']:
        keyboard.append([
            InlineKeyboardButton("üë• Saldos do Grupo", callback_data="menu_saldos_grupo"),
            InlineKeyboardButton("üí∏ Transferir", callback_data="menu_transferir")
        ])
    
    # Adicionar op√ß√µes de administrador se for admin
    if user_id == ADMIN_ID:
        if chat_type in ['group', 'supergroup']:
            keyboard.append([
                InlineKeyboardButton("üîÑ Zerar Meu Saldo", callback_data="menu_zerar_proprio"),
                InlineKeyboardButton("üóëÔ∏è Zerar Grupo", callback_data="menu_zerar_todos")
            ])
        else:
            keyboard.append([
                InlineKeyboardButton("üîÑ Zerar Meu Saldo", callback_data="menu_zerar_proprio"),
                InlineKeyboardButton("üóëÔ∏è Zerar Todos", callback_data="menu_zerar_todos")
            ])
    
    keyboard.append([InlineKeyboardButton("‚ùì Ajuda", callback_data="menu_ajuda")])
    
    return InlineKeyboardMarkup(keyboard)

def criar_menu_usuarios(chat_id, acao="transferir"):
    """Cria menu com lista de usu√°rios do grupo"""
    usuarios = saldo_bot.listar_usuarios_chat(chat_id)
    keyboard = []
    
    for usuario in usuarios[:10]:  # Limitar a 10 usu√°rios por p√°gina
        nome = usuario["name"]
        username = f"@{usuario['username']}" if usuario.get("username") else ""
        saldo = usuario["saldo"]
        
        texto_botao = f"{nome} {username} (R$ {saldo:.2f})"
        if len(texto_botao) > 30:
            texto_botao = f"{nome[:15]}... (R$ {saldo:.2f})"
        
        callback_data = f"{acao}_{usuario['id']}"
        keyboard.append([InlineKeyboardButton(texto_botao, callback_data=callback_data)])
    
    if not usuarios:
        keyboard.append([InlineKeyboardButton("Nenhum usu√°rio encontrado", callback_data="noop")])
    
    keyboard.append([InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")])
    return InlineKeyboardMarkup(keyboard)

async def configurar_menu_comandos(application):
    """Configura o menu de comandos do bot"""
    comandos = [
        BotCommand("start", "Iniciar o bot e ver menu principal"),
        BotCommand("menu", "Abrir menu interativo"),
        BotCommand("soma", "Adicionar valor ao saldo (ex: /soma 10.50)"),
        BotCommand("saldo", "Ver saldo atual"),
        BotCommand("transferir", "Transferir valor para outro usu√°rio"),
        BotCommand("saldos", "Ver saldos do grupo (apenas em grupos)"),
        BotCommand("ajuda", "Ver ajuda e comandos dispon√≠veis")
    ]
    
    # Adicionar comandos de admin se necess√°rio
    if ADMIN_ID:
        comandos.append(BotCommand("zerar", "Zerar saldo (apenas administradores)"))
    
    await application.bot.set_my_commands(comandos)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Apresenta o bot com menu interativo"""
    user = update.effective_user
    chat = update.effective_chat
    user_id = user.id
    chat_type = chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(user_id, user.first_name, user.username)
    
    if chat_type in ['group', 'supergroup']:
        welcome_message = f"""
ü§ñ Ol√° {user.first_name}! Bot de Saldo ativo no grupo!

üí° **Funcionalidades em grupos:**
‚Ä¢ Saldos individuais por usu√°rio
‚Ä¢ Transfer√™ncias entre membros
‚Ä¢ Visualiza√ß√£o de saldos do grupo
‚Ä¢ Confirma√ß√£o para transa√ß√µes

Use o menu abaixo ou digite os comandos diretamente.
        """
    else:
        welcome_message = f"""
ü§ñ Ol√° {user.first_name}! Bem-vindo ao Bot de Saldo!

Use o menu abaixo para navegar pelas funcionalidades ou digite os comandos diretamente:

üí° **Dica:** Clique nos bot√µes abaixo para uma experi√™ncia mais f√°cil!
        """
    
    keyboard = criar_menu_principal(user_id, chat_type)
    await update.message.reply_text(welcome_message, reply_markup=keyboard)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /menu - Mostra o menu interativo"""
    user_id = update.effective_user.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    
    keyboard = criar_menu_principal(user_id, chat_type)
    
    await update.message.reply_text(
        "üìã **Menu Principal**\n\nEscolha uma op√ß√£o abaixo:",
        reply_markup=keyboard
    )

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula os callbacks dos bot√µes inline"""
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.first_name
    chat_id = query.message.chat_id
    chat_type = query.message.chat.type
    data = query.data
    
    await query.answer()  # Confirma o clique do bot√£o
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(user_id, user_name, query.from_user.username)
    
    if data == "menu_principal":
        keyboard = criar_menu_principal(user_id, chat_type)
        await query.edit_message_text(
            "üìã **Menu Principal**\n\nEscolha uma op√ß√£o abaixo:",
            reply_markup=keyboard
        )
    
    elif data == "menu_adicionar":
        await query.message.reply_text(
            "üí∞ **Adicionar/Remover Valor**:\n\nüí¨ Digite o valor desejado (ex: `25.50` ou `-10.00`).",
            reply_markup=ForceReply(selective=True)
        )
    
    elif data == "menu_saldo":
        saldo_atual = saldo_bot.obter_saldo(chat_id, user_id)
        
        if saldo_atual >= 0:
            emoji = "üí∞"
            status = "positivo"
        else:
            emoji = "üî¥"
            status = "negativo"
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]])
        
        contexto = ""
        if chat_type in ['group', 'supergroup']:
            contexto = f" neste grupo"
        
        await query.edit_message_text(
            f"{emoji} **{user_name}**, seu saldo{contexto} √©:\n\n"
            f"üìä **R$ {saldo_atual:.2f}** ({status})",
            reply_markup=keyboard
        )
    
    elif data == "menu_saldos_grupo":
        if chat_type not in ['group', 'supergroup']:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
            ]])
            await query.edit_message_text(
                "‚ùå Esta fun√ß√£o est√° dispon√≠vel apenas em grupos!",
                reply_markup=keyboard
            )
            return
        
        usuarios = saldo_bot.listar_usuarios_chat(chat_id)
        
        if not usuarios:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
            ]])
            await query.edit_message_text(
                "üìä **Saldos do Grupo**\n\nNenhum usu√°rio com saldo registrado ainda.",
                reply_markup=keyboard
            )
            return
        
        texto_saldos = "üìä **Saldos do Grupo**\n\n"
        for usuario in usuarios[:10]:  # Limitar a 10 usu√°rios
            nome = usuario["name"]
            username = f" (@{usuario['username']})" if usuario.get("username") else ""
            saldo = usuario["saldo"]
            emoji_saldo = "üí∞" if saldo >= 0 else "üî¥"
            texto_saldos += f"{emoji_saldo} **{nome}**{username}: R$ {saldo:.2f}\n"
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]])
        
        await query.edit_message_text(texto_saldos, reply_markup=keyboard)
    
    elif data == "menu_transferir":
        if chat_type not in ['group', 'supergroup']:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
            ]])
            await query.edit_message_text(
                "‚ùå Transfer√™ncias est√£o dispon√≠veis apenas em grupos!",
                reply_markup=keyboard
            )
            return
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üí¨ Usar Comando", callback_data="transferir_comando"),
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]])
        
        await query.edit_message_text(
            "üí∏ **Transferir Valor**\n\n"
            "Para transferir, use o comando:\n"
            "`/transferir @usuario valor`\n\n"
            "**Exemplo:**\n"
            "`/transferir @joao 25.50`\n\n"
            "üí° O usu√°rio receber√° uma solicita√ß√£o de confirma√ß√£o.",
            reply_markup=keyboard
        )
    
    elif data == "transferir_comando":
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Voltar", callback_data="menu_transferir")
        ]])
        
        await query.edit_message_text(
            "üí¨ **Como transferir:**\n\n"
            "Digite: `/transferir @usuario valor`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/transferir @maria 10.50`\n"
            "‚Ä¢ `/transferir @joao 25`\n"
            "‚Ä¢ `/transferir @ana -5.25` (para receber)\n\n"
            "‚ö†Ô∏è **Importante:** O usu√°rio deve confirmar a transa√ß√£o!",
            reply_markup=keyboard
        )
    
    elif data == "menu_ajuda":
        if chat_type in ['group', 'supergroup']:
            ajuda_text = """
‚ùì **Ajuda - Bot em Grupos**

**üìã Comandos dispon√≠veis:**
‚Ä¢ `/start` - Inicia o bot e mostra o menu
‚Ä¢ `/menu` - Abre o menu interativo
‚Ä¢ `/soma <valor>` - Adiciona valor ao seu saldo
‚Ä¢ `/saldo` - Mostra seu saldo no grupo
‚Ä¢ `/saldos` - Mostra saldos de todos no grupo
‚Ä¢ `/transferir @usuario valor` - Transfere valor
‚Ä¢ `/ajuda` - Mostra esta ajuda

**üí° Funcionalidades em grupos:**
‚Ä¢ Cada usu√°rio tem saldo individual
‚Ä¢ Transfer√™ncias precisam de confirma√ß√£o
‚Ä¢ Administradores podem zerar saldos
‚Ä¢ Dados salvos por grupo

**üîí Comandos de Administrador:**
‚Ä¢ `/zerar` - Zera seu saldo
‚Ä¢ `/zerar tudo` - Zera saldos do grupo
            """
        else:
            ajuda_text = """
‚ùì **Ajuda - Como usar o bot**

**üìã Comandos dispon√≠veis:**
‚Ä¢ `/start` - Inicia o bot e mostra o menu
‚Ä¢ `/menu` - Abre o menu interativo
‚Ä¢ `/soma <valor>` - Adiciona valor (ex: /soma 15.50)
‚Ä¢ `/saldo` - Mostra seu saldo atual
‚Ä¢ `/ajuda` - Mostra esta ajuda

**üí° Dicas:**
‚Ä¢ Use valores negativos para subtrair (ex: /soma -10)
‚Ä¢ O menu interativo facilita o uso
‚Ä¢ Seus dados s√£o salvos automaticamente

**üîí Comandos de Administrador:**
‚Ä¢ `/zerar` - Zera seu saldo
‚Ä¢ `/zerar tudo` - Zera todos os saldos
            """
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]])
        
        await query.edit_message_text(ajuda_text, reply_markup=keyboard)
    
    elif data == "menu_zerar_proprio":
        if user_id != ADMIN_ID:
            await query.edit_message_text(
                "‚ùå **Acesso negado!**\n\nüîí Apenas administradores podem usar esta fun√ß√£o.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
                ]])
            )
            return
        
        saldo_bot.zerar_saldo(chat_id, user_id)
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]])
        
        contexto = ""
        if chat_type in ['group', 'supergroup']:
            contexto = " neste grupo"
        
        await query.edit_message_text(
            f"üîÑ **{user_name}**, seu saldo{contexto} foi zerado!\n\nüìä **Saldo atual:** R$ 0,00",
            reply_markup=keyboard
        )
    
    elif data == "menu_zerar_todos":
        if user_id != ADMIN_ID:
            await query.edit_message_text(
                "‚ùå **Acesso negado!**\n\nüîí Apenas administradores podem usar esta fun√ß√£o.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
                ]])
            )
            return
        
        if chat_type in ['group', 'supergroup']:
            saldo_bot.zerar_todos_saldos(chat_id)
            mensagem = "üîÑ **Administrador**, todos os saldos do grupo foram zerados!\n\n‚úÖ Grupo reiniciado com sucesso."
        else:
            saldo_bot.zerar_todos_saldos(chat_id)
            mensagem = "üîÑ **Administrador**, todos os saldos foram zerados!\n\n‚úÖ Sistema reiniciado com sucesso."
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]])
        
        await query.edit_message_text(mensagem, reply_markup=keyboard)
    
    elif data.startswith("valor_"):
        try:
            valor_str = data.replace("valor_", "")
            valor = Decimal(valor_str)
            
            saldo_bot.adicionar_valor(chat_id, user_id, valor)
            novo_saldo = saldo_bot.obter_saldo(chat_id, user_id)
            
            if valor >= 0:
                emoji = "‚ûï"
                acao = "adicionado"
            else:
                emoji = "‚ûñ"
                acao = "subtra√≠do"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ Adicionar Mais", callback_data="menu_adicionar")],
                [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
            ])
            
            contexto = ""
            if chat_type in ['group', 'supergroup']:
                contexto = " no grupo"
            
            await query.edit_message_text(
                f"{emoji} **{user_name}**, valor {acao} com sucesso{contexto}!\n\n"
                f"üí∞ **Valor {acao}:** R$ {abs(valor):.2f}\n"
                f"üìä **Saldo atual:** R$ {novo_saldo:.2f}",
                reply_markup=keyboard
            )
            
        except (InvalidOperation, ValueError):
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar", callback_data="menu_adicionar")
            ]])
            
            await query.edit_message_text(
                "‚ùå Erro interno. Tente novamente.",
                reply_markup=keyboard
            )
    
    elif data.startswith("confirmar_") or data.startswith("rejeitar_"):
        # Processar confirma√ß√µes de transfer√™ncia
        await processar_confirmacao_transferencia(update, context, data)
    
    elif data == "noop":
        # N√£o fazer nada (bot√£o desabilitado)
        pass

async def processar_confirmacao_transferencia(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """Processa confirma√ß√£o ou rejei√ß√£o de transfer√™ncia"""
    query = update.callback_query
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    
    # Extrair ID da transa√ß√£o
    parts = data.split("_")
    acao = parts[0]  # "confirmar" ou "rejeitar"
    transacao_id = "_".join(parts[1:])
    
    if transacao_id not in saldo_bot.transacoes_pendentes:
        await query.edit_message_text(
            "‚ùå **Transa√ß√£o expirada ou inv√°lida.**\n\n"
            "Esta solicita√ß√£o n√£o √© mais v√°lida."
        )
        return
    
    transacao = saldo_bot.transacoes_pendentes[transacao_id]
    
    # Verificar se √© o destinat√°rio correto
    if user_id != transacao["destinatario_id"]:
        await query.answer("‚ùå Voc√™ n√£o pode responder a esta transa√ß√£o.", show_alert=True)
        return
    
    if acao == "confirmar":
        # Executar a transfer√™ncia
        valor = transacao["valor"]
        remetente_id = transacao["remetente_id"]
        remetente_nome = transacao["remetente_nome"]
        destinatario_nome = transacao["destinatario_nome"]
        
        # Verificar se remetente tem saldo suficiente (se for valor positivo)
        if valor > 0:
            saldo_remetente = saldo_bot.obter_saldo(chat_id, remetente_id)
            if saldo_remetente < valor:
                await query.edit_message_text(
                    f"‚ùå **Transa√ß√£o cancelada!**\n\n"
                    f"**{remetente_nome}** n√£o possui saldo suficiente.\n"
                    f"Saldo atual: R$ {saldo_remetente:.2f}\n"
                    f"Valor solicitado: R$ {valor:.2f}"
                )
                del saldo_bot.transacoes_pendentes[transacao_id]
                return
        
        # Executar transfer√™ncia
        saldo_bot.adicionar_valor(chat_id, remetente_id, -valor)
        saldo_bot.adicionar_valor(chat_id, user_id, valor)
        
        novo_saldo_remetente = saldo_bot.obter_saldo(chat_id, remetente_id)
        novo_saldo_destinatario = saldo_bot.obter_saldo(chat_id, user_id)
        
        await query.edit_message_text(
            f"‚úÖ **Transfer√™ncia confirmada!**\n\n"
            f"üí∏ **{remetente_nome}** ‚Üí **{destinatario_nome}**\n"
            f"üí∞ **Valor:** R$ {valor:.2f}\n\n"
            f"üìä **Novos saldos:**\n"
            f"‚Ä¢ **{remetente_nome}:** R$ {novo_saldo_remetente:.2f}\n"
            f"‚Ä¢ **{destinatario_nome}:** R$ {novo_saldo_destinatario:.2f}"
        )
        
        # Notificar o remetente
        try:
            await context.bot.send_message(
                chat_id=remetente_id,
                text=f"‚úÖ **Transfer√™ncia confirmada por {destinatario_nome}!**\n\n"
                     f"üí∞ **Valor:** R$ {valor:.2f}\n"
                     f"üìä **Seu novo saldo:** R$ {novo_saldo_remetente:.2f}"
            )
        except:
            pass  # Usu√°rio pode ter bloqueado o bot
    
    else:  # rejeitar
        remetente_nome = transacao["remetente_nome"]
        destinatario_nome = transacao["destinatario_nome"]
        valor = transacao["valor"]
        
        await query.edit_message_text(
            f"‚ùå **Transfer√™ncia rejeitada!**\n\n"
            f"**{destinatario_nome}** rejeitou a transfer√™ncia de R$ {valor:.2f} de **{remetente_nome}**."
        )
        
        # Notificar o remetente
        try:
            await context.bot.send_message(
                chat_id=transacao["remetente_id"],
                text=f"‚ùå **Transfer√™ncia rejeitada!**\n\n"
                     f"**{destinatario_nome}** rejeitou sua transfer√™ncia de R$ {valor:.2f}."
            )
        except:
            pass  # Usu√°rio pode ter bloqueado o bot
    
    # Remover transa√ß√£o pendente
    del saldo_bot.transacoes_pendentes[transacao_id]

async def transferir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /transferir - Transfere valor para outro usu√°rio"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(user_id, user_name, update.effective_user.username)
    
    if chat_type not in ['group', 'supergroup']:
        await update.message.reply_text(
            "‚ùå **Transfer√™ncias est√£o dispon√≠veis apenas em grupos!**\n\n"
            "Adicione o bot a um grupo para usar esta funcionalidade."
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå **Uso incorreto!**\n\n"
            "**Formato:** `/transferir @usuario valor`\n\n"
            "**Exemplos:**\n"
            "‚Ä¢ `/transferir @maria 10.50`\n"
            "‚Ä¢ `/transferir @joao 25`"
        )
        return
    
    try:
        destinatario_username = context.args[0].replace('@', '').lower()
        valor_str = context.args[1].replace(',', '.')
        valor = Decimal(valor_str)
        
        if valor == 0:
            await update.message.reply_text("‚ùå **Valor deve ser diferente de zero!**")
            return
        
        # Procurar usu√°rio pelo username
        destinatario_id = None
        destinatario_nome = None
        
        for user_id_str, info in saldo_bot.dados.get("usuarios", {}).items():
            if info.get("username", "").lower() == destinatario_username:
                destinatario_id = int(user_id_str)
                destinatario_nome = info["name"]
                break
        
        if not destinatario_id:
            await update.message.reply_text(
                f"‚ùå **Usu√°rio @{destinatario_username} n√£o encontrado!**\n\n"
                "O usu√°rio deve ter interagido com o bot pelo menos uma vez."
            )
            return
        
        if destinatario_id == user_id:
            await update.message.reply_text("‚ùå **Voc√™ n√£o pode transferir para si mesmo!**")
            return
        
        # Verificar se remetente tem saldo suficiente (se for valor positivo)
        if valor > 0:
            saldo_remetente = saldo_bot.obter_saldo(chat_id, user_id)
            if saldo_remetente < valor:
                await update.message.reply_text(
                    f"‚ùå **Saldo insuficiente!**\n\n"
                    f"üí∞ **Seu saldo:** R$ {saldo_remetente:.2f}\n"
                    f"üí∏ **Valor solicitado:** R$ {valor:.2f}"
                )
                return
        
        # Criar transa√ß√£o pendente
        transacao_id = f"{user_id}_{destinatario_id}_{int(time.time())}"
        saldo_bot.transacoes_pendentes[transacao_id] = {
            "remetente_id": user_id,
            "remetente_nome": user_name,
            "destinatario_id": destinatario_id,
            "destinatario_nome": destinatario_nome,
            "valor": valor,
            "chat_id": chat_id,
            "timestamp": time.time()
        }
        
        # Criar bot√µes de confirma√ß√£o
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"confirmar_{transacao_id}"),
                InlineKeyboardButton("‚ùå Rejeitar", callback_data=f"rejeitar_{transacao_id}")
            ]
        ])
        
        # Enviar solicita√ß√£o de confirma√ß√£o
        if valor > 0:
            tipo_transacao = "transferir"
            emoji = "üí∏"
        else:
            tipo_transacao = "receber"
            emoji = "üí∞"
            valor = abs(valor)
        
        await update.message.reply_text(
            f"{emoji} **Solicita√ß√£o de Transfer√™ncia**\n\n"
            f"**{user_name}** quer {tipo_transacao} **R$ {valor:.2f}** para **{destinatario_nome}**.\n\n"
            f"@{destinatario_username}, voc√™ aceita esta transa√ß√£o?",
            reply_markup=keyboard
        )
        
    except (InvalidOperation, ValueError):
        await update.message.reply_text(
            "‚ùå **Valor inv√°lido!**\n\n"
            "Use apenas n√∫meros.\n\n"
            "**Exemplos v√°lidos:**\n"
            "‚Ä¢ `/transferir @maria 10`\n"
            "‚Ä¢ `/transferir @joao 15.50`"
        )

async def saldos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /saldos - Mostra saldos do grupo"""
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    
    if chat_type not in ['group', 'supergroup']:
        await update.message.reply_text(
            "‚ùå **Este comando est√° dispon√≠vel apenas em grupos!**"
        )
        return
    
    usuarios = saldo_bot.listar_usuarios_chat(chat_id)
    
    if not usuarios:
        await update.message.reply_text(
            "üìä **Saldos do Grupo**\n\nNenhum usu√°rio com saldo registrado ainda."
        )
        return
    
    texto_saldos = "üìä **Saldos do Grupo**\n\n"
    for usuario in usuarios[:15]:  # Limitar a 15 usu√°rios
        nome = usuario["name"]
        username = f" (@{usuario['username']})" if usuario.get("username") else ""
        saldo = usuario["saldo"]
        emoji_saldo = "üí∞" if saldo >= 0 else "üî¥"
        texto_saldos += f"{emoji_saldo} **{nome}**{username}: R$ {saldo:.2f}\n"
    
    if len(usuarios) > 15:
        texto_saldos += f"\n... e mais {len(usuarios) - 15} usu√°rios."
    
    await update.message.reply_text(texto_saldos)

# Importar outras fun√ß√µes do bot original (ajuda, soma, saldo, zerar, etc.)
# ... (c√≥digo das outras fun√ß√µes seria muito longo, mas seguiria o mesmo padr√£o)

async def soma(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /soma - Adiciona valor ao saldo"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(user_id, user_name, update.effective_user.username)
    
    if not context.args:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ Usar Menu de Valores", callback_data="menu_adicionar")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
        ])
        
        await update.message.reply_text(
            "‚ùå Por favor, informe um valor!\n\n"
            "**Exemplo:** `/soma 15.50`\n\n"
            "üí° **Dica:** Use o menu abaixo para valores r√°pidos!",
            reply_markup=keyboard
        )
        return
    
    try:
        valor_str = context.args[0].replace(',', '.')
        valor = Decimal(valor_str)
        
        saldo_bot.adicionar_valor(chat_id, user_id, valor)
        novo_saldo = saldo_bot.obter_saldo(chat_id, user_id)
        
        if valor >= 0:
            emoji = "‚ûï"
            acao = "adicionado"
        else:
            emoji = "‚ûñ"
            acao = "subtra√≠do"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ Adicionar Mais", callback_data="menu_adicionar")],
            [InlineKeyboardButton("üìä Ver Saldo", callback_data="menu_saldo")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
        ])
        
        contexto = ""
        if chat_type in ['group', 'supergroup']:
            contexto = " no grupo"
        
        await update.message.reply_text(
            f"{emoji} **{user_name}**, valor {acao} com sucesso{contexto}!\n\n"
            f"üí∞ **Valor {acao}:** R$ {abs(valor):.2f}\n"
            f"üìä **Saldo atual:** R$ {novo_saldo:.2f}",
            reply_markup=keyboard
        )
        
    except (InvalidOperation, ValueError):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ Usar Menu de Valores", callback_data="menu_adicionar")],
            [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
        ])
        
        await update.message.reply_text(
            "‚ùå Valor inv√°lido! Use apenas n√∫meros.\n\n"
            "**Exemplos v√°lidos:**\n"
            "‚Ä¢ `/soma 10`\n"
            "‚Ä¢ `/soma 15.50`\n"
            "‚Ä¢ `/soma -5.25`\n\n"
            "üí° **Dica:** Use o menu abaixo para valores r√°pidos!",
            reply_markup=keyboard
        )

async def saldo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /saldo - Mostra o saldo atual"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(user_id, user_name, update.effective_user.username)
    
    saldo_atual = saldo_bot.obter_saldo(chat_id, user_id)
    
    if saldo_atual >= 0:
        emoji = "üí∞"
        status = "positivo"
    else:
        emoji = "üî¥"
        status = "negativo"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ Adicionar Valor", callback_data="menu_adicionar")],
        [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
    ])
    
    contexto = ""
    if chat_type in ['group', 'supergroup']:
        contexto = " neste grupo"
    
    await update.message.reply_text(
        f"{emoji} **{user_name}**, seu saldo{contexto} √©:\n\n"
        f"üìä **R$ {saldo_atual:.2f}** ({status})",
        reply_markup=keyboard
    )

async def ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /ajuda - Mostra ajuda com menu"""
    user_id = update.effective_user.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    
    if chat_type in ['group', 'supergroup']:
        ajuda_text = """
‚ùì **Ajuda - Bot em Grupos**

**üìã Comandos dispon√≠veis:**
‚Ä¢ `/start` - Inicia o bot e mostra o menu
‚Ä¢ `/menu` - Abre o menu interativo
‚Ä¢ `/soma <valor>` - Adiciona valor ao seu saldo
‚Ä¢ `/saldo` - Mostra seu saldo no grupo
‚Ä¢ `/saldos` - Mostra saldos de todos no grupo
‚Ä¢ `/transferir @usuario valor` - Transfere valor
‚Ä¢ `/ajuda` - Mostra esta ajuda

**üí° Funcionalidades em grupos:**
‚Ä¢ Cada usu√°rio tem saldo individual
‚Ä¢ Transfer√™ncias precisam de confirma√ß√£o
‚Ä¢ Administradores podem zerar saldos
‚Ä¢ Dados salvos por grupo

**üîí Comandos de Administrador:**
‚Ä¢ `/zerar` - Zera seu saldo
‚Ä¢ `/zerar tudo` - Zera saldos do grupo
        """
    else:
        ajuda_text = """
‚ùì **Ajuda - Como usar o bot**

**üìã Comandos dispon√≠veis:**
‚Ä¢ `/start` - Inicia o bot e mostra o menu
‚Ä¢ `/menu` - Abre o menu interativo
‚Ä¢ `/soma <valor>` - Adiciona valor (ex: /soma 15.50)
‚Ä¢ `/saldo` - Mostra seu saldo atual
‚Ä¢ `/ajuda` - Mostra esta ajuda

**üí° Dicas:**
‚Ä¢ Use valores negativos para subtrair (ex: /soma -10)
‚Ä¢ O menu interativo facilita o uso
‚Ä¢ Seus dados s√£o salvos automaticamente

**üîí Comandos de Administrador:**
‚Ä¢ `/zerar` - Zera seu saldo
‚Ä¢ `/zerar tudo` - Zera todos os saldos
        """
    
    keyboard = criar_menu_principal(user_id, chat_type)
    await update.message.reply_text(ajuda_text, reply_markup=keyboard)

async def zerar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /zerar - Zera saldo (apenas para administradores)"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    # Registrar usu√°rio
    saldo_bot.registrar_usuario(user_id, user_name, update.effective_user.username)
    
    # Verificar se √© administrador
    if user_id != ADMIN_ID:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")
        ]])
        
        await update.message.reply_text(
            "‚ùå **Acesso negado!**\n\n"
            "üîí Apenas administradores podem usar este comando.",
            reply_markup=keyboard
        )
        return
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä Ver Saldo", callback_data="menu_saldo")],
        [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
    ])
    
    # Verificar se h√° argumentos para zerar tudo
    if context.args and context.args[0].lower() == "tudo":
        if chat_type in ['group', 'supergroup']:
            saldo_bot.zerar_todos_saldos(chat_id)
            mensagem = "üîÑ **Administrador**, todos os saldos do grupo foram zerados!\n\n‚úÖ Grupo reiniciado com sucesso."
        else:
            saldo_bot.zerar_todos_saldos(chat_id)
            mensagem = "üîÑ **Administrador**, todos os saldos foram zerados!\n\n‚úÖ Sistema reiniciado com sucesso."
        
        await update.message.reply_text(mensagem, reply_markup=keyboard)
    else:
        # Zerar apenas o saldo do administrador
        saldo_bot.zerar_saldo(chat_id, user_id)
        
        contexto = ""
        if chat_type in ['group', 'supergroup']:
            contexto = " neste grupo"
            dica = f"üí° **Dica:** Use `/zerar tudo` para zerar todos os saldos do grupo."
        else:
            dica = f"üí° **Dica:** Use `/zerar tudo` para zerar todos os saldos."
        
        await update.message.reply_text(
            f"üîÑ **{user_name}**, seu saldo{contexto} foi zerado!\n\n"
            f"üìä **Saldo atual:** R$ 0,00\n\n{dica}",
            reply_markup=keyboard
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manipula erros"""
    logger.error(f"Erro: {context.error}")

# Fun√ß√£o que processa valor personalizado
async def processar_valor_personalizado(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return  # ignorar mensagens que n√£o s√£o resposta

    texto = update.message.text.strip().replace(',', '.')
    try:
        valor = float(texto)
    except ValueError:
        await update.message.reply_text("‚ùå Valor inv√°lido. Digite um n√∫mero como `25.50` ou `-10.00`.")
        return

    context.args = [str(valor)]
    await soma(update, context)
    context.user_data['saldo'] = context.user_data.get('saldo', 0) + valor

async def main():
    """Fun√ß√£o principal"""
    if BOT_TOKEN == "SEU_TOKEN_AQUI":
        print("‚ùå ERRO: Configure o token do bot no arquivo config.py")
        print("üìù Obtenha seu token em: https://t.me/BotFather")
        return
    
    # Criar aplica√ß√£o
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Configurar menu de comandos
    application.job_queue.run_once(
        lambda context: configurar_menu_comandos(application),
        when=1
    )
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("ajuda", ajuda))
    application.add_handler(CommandHandler("soma", soma))
    application.add_handler(CommandHandler("saldo", saldo))
    application.add_handler(CommandHandler("saldos", saldos))
    application.add_handler(CommandHandler("transferir", transferir))
    application.add_handler(CommandHandler("zerar", zerar))
    
    # Adicionar handler para callbacks dos bot√µes
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # Adicionar handler de erro
    application.add_error_handler(error_handler)

    # Adicione handler de valor personalizado
    application.add_handler(MessageHandler(filters.REPLY & filters.TEXT, processar_valor_personalizado))

    
    print("ü§ñ Bot para grupos com menu interativo iniciado! Pressione Ctrl+C para parar.")
    print("üì± Teste o bot enviando /start")
    print("üë• Funciona em grupos e chats privados!")
    print("üí∏ Transfer√™ncias com confirma√ß√£o dispon√≠veis!")
    
    # Executar bot
    await application.run_polling(allowed_updates=Update.ALL_TYPES)
    # await application.initialize()
    # await application.start()

# if __name__ == '__main__':
#     asyncio.run(main())

def start_bot():
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    loop.create_task(main())

